What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, the .git file is added to the directory. This also means that
Git can be used with Git functions like log and commit and so it can track changes now available. Needed
to differentiate it from just a plain directory/folder. 


How is the staging area different from the working directory and the repository? What value do you think it offers?

The repository is the final stage, the working directory is the general folder, the staging area lets you see what changes
you have made/can make before you commit them. If you are happy you can commit them. I suppose it keeps the Git cleaner, as 
you wont have commits that people are unhappy with and then change straight after. So cleaner directory and code. 


How can you use the staging area to make sure you have one commit per logical change?

The staging areas lets you see what changes you have made and how they differ from the ones in the working depository, 
and allows you to change them if you want. So it allows you to see exactly what you are changing, and in all the files,
to make sure you don't make one commit for changes in each file.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Although I find them quite confusing to sort out, I see how branches can help. If you have the basic code/format and want to 
have different versions, for things such as language, region/nation, age etc, it allows you to offer different versions at the
same time, instead of just one. It would help you have branches coming off the main code, so you just have to add a few
bits of smaller code rather than start again. It would also allow you to make experimental changes while keeping the 
working one live. 


How do the diagrams help you visualize the branch structure?

Diagrams make it easier for me personally to see what is happening, where each commit lies and how they interract with each other. It
lets me think of it in a clearer way, and once I have done a diagram I can use it several times to look at things such as
expected commits, parents, what is unreachable in git log, the different branches etc. 


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging the two branches together is one branch or version of some code that has different sets of features 
merged into one, so instead of having two seperate branches of code, it is now one. Git log will show people the commits 
and when features were introduced, so people can access those commits. It is a streamlined process and easier than having 
two seperate branches. It is represented in the diagram with a break to indicate where the other branch started and 
where it ended. As though they are merged together, it is good to have a visual aid to help you remember where the 
branches were merged. It reminds me of a roller coaster, as it shows how they were seperate tracks but they have now 
joined. 